function row(s,t=""){return`<div class="row" style="${t}">${s}</div>`}function col(s){return`<div class="col-sm">${s}</div>`}function css(s={}){if("string"==typeof s)return s;return Object.keys(s).map(t=>`${t}: ${s[t]}`).join(";")}function block(s){return`\n  <form name="${s}">\n  <h5>${s}</h5>\n  <div class="form-group">\n    <input class="form-control form-control-sm" name="value" placeholder="value">\n  </div>\n  <div class="form-group">\n    <input class="form-control form-control-sm" name="styles" placeholder="styles">\n  </div>\n  <button type="submit" class="btn btn-primary btn-sm">Добавить</button>\n</form>\n<hr />\n   `}class Block{constructor(s,t){this.value=s,this.options=t}toHTML(){throw new Error("Метод toHTML должен быть реализован")}}class TitleBlock extends Block{constructor(s,t){super(s,t)}toHTML(){const{tag:s="h1",styles:t}=this.options;return row(col(`<${s}>${this.value}</${s}>`),css(t))}}class ImageBlock extends Block{constructor(s,t){super(s,t)}toHTML(){const{imageStyles:s,alt:t="",styles:o}=this.options;return row(`<img src="${this.value}" alt='${t}' style='${css(s)}'/>`,css(this.options.styles))}}class ColumnsBlock extends Block{constructor(s,t){super(s,t)}toHTML(){return row(this.value.map(col).join(""),css(this.options.styles))}}class TextBlock extends Block{constructor(s,t){super(s,t)}toHTML(){return row(col(`<p>${this.value}</p>`),css(this.options.styles))}}